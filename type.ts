import { scope } from "arktype";
import {} from "@arktype/schema";
export const $ = scope({
  ACMEDNS01AliDNSOptions: {
    "access_key_id?": "string",
    "access_key_secret?": "string",
    "region_id?": "string",
  },
  ACMEDNS01ChallengeOptions: [
    [{ provider: "'alidns'" }, "&", "ACMEDNS01AliDNSOptions"],
    "|",
    [{ provider: "'cloudflare'" }, "&", "ACMEDNS01CloudflareOptions"],
  ],
  ACMEDNS01CloudflareOptions: {
    "api_token?": "string",
  },
  ACMEExternalAccountOptions: {
    "key_id?": "string",
    "mac_key?": "string",
  },
  AddrPrefix: "string",
  BrutalOptions: {
    "enabled?": "boolean",
    "up_mbps?": "integer",
    "down_mbps?": "integer",
  },
  CacheFileOptions: {
    "enabled?": "boolean",
    "path?": "string",
    "cache_id?": "string",
    "store_fakeip?": "boolean",
    "store_rdrc?": "boolean",
    "rdrc_timeout?": "Duration",
  },
  ClashAPIOptions: {
    "external_controller?": "string",
    "external_ui?": "string",
    "external_ui_download_url?": "string",
    "external_ui_download_detour?": "string",
    "secret?": "string",
    "default_mode?": "string",
    "cache_file?": "string",
    "cache_id?": "string",
    "store_mode?": "boolean",
    "store_selected?": "boolean",
    "store_fakeip?": "boolean",
  },
  DNSFakeIPOptions: {
    "enabled?": "boolean",
    "inet4_range?": "Prefix",
    "inet6_range?": "Prefix",
  },
  DNSOptions: {
    "servers?": "DNSServerOptions[]",
    "rules?": "DNSRule[]",
    "final?": "string",
    "reverse_mapping?": "boolean",
    "fakeip?": "DNSFakeIPOptions",
    "strategy?": "DomainStrategy",
    "disable_cache?": "boolean",
    "disable_expire?": "boolean",
    "independent_cache?": "boolean",
    "client_subnet?": "AddrPrefix",
  },
  DNSQueryType: "integer | string",
  DNSRule: [
    [{ "type?": "'default'" }, "&", "DefaultDNSRule"],
    "|",
    [{ "type?": "'logical'" }, "&", "LogicalDNSRule"],
  ],
  DNSServerOptions: {
    "tag?": "string",
    address: "string",
    "address_resolver?": "string",
    "address_strategy?": "DomainStrategy",
    "address_fallback_delay?": "Duration",
    "strategy?": "DomainStrategy",
    "detour?": "string",
    "client_subnet?": "AddrPrefix",
  },
  DebugOptions: {
    "listen?": "string",
    "gc_percent?": "integer",
    "max_stack?": "integer",
    "max_threads?": "integer",
    "panic_on_fault?": "boolean",
    "trace_back?": "string",
    "memory_limit?": "MemoryBytes",
    "oom_killer?": "boolean",
  },
  DefaultDNSRule: {
    "inbound?": "string | string[]",
    "ip_version?": "integer",
    "query_type?": "DNSQueryType | DNSQueryType[]",
    "network?": "string | string[]",
    "auth_user?": "string | string[]",
    "protocol?": "string | string[]",
    "domain?": "string | string[]",
    "domain_suffix?": "string | string[]",
    "domain_keyword?": "string | string[]",
    "domain_regex?": "string | string[]",
    "geosite?": "string | string[]",
    "source_geoip?": "string | string[]",
    "geoip?": "string | string[]",
    "ip_cidr?": "string | string[]",
    "ip_is_private?": "boolean",
    "source_ip_cidr?": "string | string[]",
    "source_ip_is_private?": "boolean",
    "source_port?": "integer | integer[]",
    "source_port_range?": "string | string[]",
    "port?": "integer | integer[]",
    "port_range?": "string | string[]",
    "process_name?": "string | string[]",
    "process_path?": "string | string[]",
    "package_name?": "string | string[]",
    "user?": "string | string[]",
    "user_id?": "integer | integer[]",
    "outbound?": "string | string[]",
    "clash_mode?": "string",
    "wifi_ssid?": "string | string[]",
    "wifi_bssid?": "string | string[]",
    "rule_set?": "string | string[]",
    "rule_set_ipcidr_match_source?": "boolean",
    "invert?": "boolean",
    "server?": "string",
    "disable_cache?": "boolean",
    "rewrite_ttl?": "integer",
    "client_subnet?": "AddrPrefix",
  },
  DefaultRule: {
    "inbound?": "string | string[]",
    "ip_version?": "integer",
    "network?": "string | string[]",
    "auth_user?": "string | string[]",
    "protocol?": "string | string[]",
    "domain?": "string | string[]",
    "domain_suffix?": "string | string[]",
    "domain_keyword?": "string | string[]",
    "domain_regex?": "string | string[]",
    "geosite?": "string | string[]",
    "source_geoip?": "string | string[]",
    "geoip?": "string | string[]",
    "source_ip_cidr?": "string | string[]",
    "source_ip_is_private?": "boolean",
    "ip_cidr?": "string | string[]",
    "ip_is_private?": "boolean",
    "source_port?": "integer | integer[]",
    "source_port_range?": "string | string[]",
    "port?": "integer | integer[]",
    "port_range?": "string | string[]",
    "process_name?": "string | string[]",
    "process_path?": "string | string[]",
    "package_name?": "string | string[]",
    "user?": "string | string[]",
    "user_id?": "integer | integer[]",
    "clash_mode?": "string",
    "wifi_ssid?": "string | string[]",
    "wifi_bssid?": "string | string[]",
    "rule_set?": "string | string[]",
    "rule_set_ipcidr_match_source?": "boolean",
    "invert?": "boolean",
    "outbound?": "string",
  },
  DirectInboundOptions: {
    "listen?": "ListenAddress",
    "listen_port?": "integer",
    "tcp_fast_open?": "boolean",
    "tcp_multi_path?": "boolean",
    "udp_fragment?": "boolean",
    "udp_timeout?": "UDPTimeoutCompat",
    "proxy_protocol?": "boolean",
    "proxy_protocol_accept_no_header?": "boolean",
    "detour?": "string",
    "sniff?": "boolean",
    "sniff_override_destination?": "boolean",
    "sniff_timeout?": "Duration",
    "domain_strategy?": "DomainStrategy",
    "udp_disable_domain_unmapping?": "boolean",
    "network?": "NetworkList",
    "override_address?": "string",
    "override_port?": "integer",
  },
  DirectOutboundOptions: {
    "detour?": "string",
    "bind_interface?": "string",
    "inet4_bind_address?": "ListenAddress",
    "inet6_bind_address?": "ListenAddress",
    "protect_path?": "string",
    "routing_mark?": "integer",
    "reuse_addr?": "boolean",
    "connect_timeout?": "Duration",
    "tcp_fast_open?": "boolean",
    "tcp_multi_path?": "boolean",
    "udp_fragment?": "boolean",
    "domain_strategy?": "DomainStrategy",
    "fallback_delay?": "Duration",
    "override_address?": "string",
    "override_port?": "integer",
    "proxy_protocol?": "integer",
  },
  DomainStrategy:
    "'' | 'prefer_ipv4' | 'prefer_ipv6' | 'ipv4_only' | 'ipv6_only'",
  Duration: "string",
  ExperimentalOptions: {
    "cache_file?": "CacheFileOptions",
    "clash_api?": "ClashAPIOptions",
    "v2ray_api?": "V2RayAPIOptions",
    "debug?": "DebugOptions",
  },
  GeoIPOptions: {
    "path?": "string",
    "download_url?": "string",
    "download_detour?": "string",
  },
  GeositeOptions: {
    "path?": "string",
    "download_url?": "string",
    "download_detour?": "string",
  },
  HTTPMixedInboundOptions: {
    "listen?": "ListenAddress",
    "listen_port?": "integer",
    "tcp_fast_open?": "boolean",
    "tcp_multi_path?": "boolean",
    "udp_fragment?": "boolean",
    "udp_timeout?": "UDPTimeoutCompat",
    "proxy_protocol?": "boolean",
    "proxy_protocol_accept_no_header?": "boolean",
    "detour?": "string",
    "sniff?": "boolean",
    "sniff_override_destination?": "boolean",
    "sniff_timeout?": "Duration",
    "domain_strategy?": "DomainStrategy",
    "udp_disable_domain_unmapping?": "boolean",
    "users?": "User[]",
    "set_system_proxy?": "boolean",
    "tls?": "InboundTLSOptions",
  },
  HTTPOutboundOptions: {
    "detour?": "string",
    "bind_interface?": "string",
    "inet4_bind_address?": "ListenAddress",
    "inet6_bind_address?": "ListenAddress",
    "protect_path?": "string",
    "routing_mark?": "integer",
    "reuse_addr?": "boolean",
    "connect_timeout?": "Duration",
    "tcp_fast_open?": "boolean",
    "tcp_multi_path?": "boolean",
    "udp_fragment?": "boolean",
    "domain_strategy?": "DomainStrategy",
    "fallback_delay?": "Duration",
    server: "string",
    server_port: "integer",
    "username?": "string",
    "password?": "string",
    "tls?": "OutboundTLSOptions",
    "path?": "string",
    "headers?": { ["string"]: "string | string[]" },
  },
  HTTPProxyOptions: {
    "enabled?": "boolean",
    server: "string",
    server_port: "integer",
    "bypass_domain?": "string | string[]",
    "match_domain?": "string | string[]",
  },
  Hysteria2InboundOptions: {
    "listen?": "ListenAddress",
    "listen_port?": "integer",
    "tcp_fast_open?": "boolean",
    "tcp_multi_path?": "boolean",
    "udp_fragment?": "boolean",
    "udp_timeout?": "UDPTimeoutCompat",
    "proxy_protocol?": "boolean",
    "proxy_protocol_accept_no_header?": "boolean",
    "detour?": "string",
    "sniff?": "boolean",
    "sniff_override_destination?": "boolean",
    "sniff_timeout?": "Duration",
    "domain_strategy?": "DomainStrategy",
    "udp_disable_domain_unmapping?": "boolean",
    "up_mbps?": "integer",
    "down_mbps?": "integer",
    "obfs?": "Hysteria2Obfs",
    "users?": "Hysteria2User[]",
    "ignore_client_bandwidth?": "boolean",
    "tls?": "InboundTLSOptions",
    "masquerade?": "string",
    "brutal_debug?": "boolean",
  },
  Hysteria2Obfs: {
    "type?": "string",
    "password?": "string",
  },
  Hysteria2OutboundOptions: {
    "detour?": "string",
    "bind_interface?": "string",
    "inet4_bind_address?": "ListenAddress",
    "inet6_bind_address?": "ListenAddress",
    "protect_path?": "string",
    "routing_mark?": "integer",
    "reuse_addr?": "boolean",
    "connect_timeout?": "Duration",
    "tcp_fast_open?": "boolean",
    "tcp_multi_path?": "boolean",
    "udp_fragment?": "boolean",
    "domain_strategy?": "DomainStrategy",
    "fallback_delay?": "Duration",
    server: "string",
    server_port: "integer",
    "up_mbps?": "integer",
    "down_mbps?": "integer",
    "obfs?": "Hysteria2Obfs",
    "password?": "string",
    "network?": "NetworkList",
    "tls?": "OutboundTLSOptions",
    "brutal_debug?": "boolean",
  },
  Hysteria2User: {
    "name?": "string",
    "password?": "string",
  },
  HysteriaInboundOptions: {
    "listen?": "ListenAddress",
    "listen_port?": "integer",
    "tcp_fast_open?": "boolean",
    "tcp_multi_path?": "boolean",
    "udp_fragment?": "boolean",
    "udp_timeout?": "UDPTimeoutCompat",
    "proxy_protocol?": "boolean",
    "proxy_protocol_accept_no_header?": "boolean",
    "detour?": "string",
    "sniff?": "boolean",
    "sniff_override_destination?": "boolean",
    "sniff_timeout?": "Duration",
    "domain_strategy?": "DomainStrategy",
    "udp_disable_domain_unmapping?": "boolean",
    "up?": "string",
    "up_mbps?": "integer",
    "down?": "string",
    "down_mbps?": "integer",
    "obfs?": "string",
    "users?": "HysteriaUser[]",
    "recv_window_conn?": "integer",
    "recv_window_client?": "integer",
    "max_conn_client?": "integer",
    "disable_mtu_discovery?": "boolean",
    "tls?": "InboundTLSOptions",
  },
  HysteriaOutboundOptions: {
    "detour?": "string",
    "bind_interface?": "string",
    "inet4_bind_address?": "ListenAddress",
    "inet6_bind_address?": "ListenAddress",
    "protect_path?": "string",
    "routing_mark?": "integer",
    "reuse_addr?": "boolean",
    "connect_timeout?": "Duration",
    "tcp_fast_open?": "boolean",
    "tcp_multi_path?": "boolean",
    "udp_fragment?": "boolean",
    "domain_strategy?": "DomainStrategy",
    "fallback_delay?": "Duration",
    server: "string",
    server_port: "integer",
    "up?": "string",
    "up_mbps?": "integer",
    "down?": "string",
    "down_mbps?": "integer",
    "obfs?": "string",
    "auth?": "integer[]",
    "auth_str?": "string",
    "recv_window_conn?": "integer",
    "recv_window?": "integer",
    "disable_mtu_discovery?": "boolean",
    "network?": "NetworkList",
    "tls?": "OutboundTLSOptions",
  },
  HysteriaUser: {
    "name?": "string",
    "auth?": "integer[]",
    "auth_str?": "string",
  },
  Inbound: [
    [
      [
        [
          [
            [
              [
                [
                  [
                    [
                      [
                        [
                          [
                            [
                              [
                                [
                                  [
                                    { type: "'direct'" },
                                    "&",
                                    "DirectInboundOptions",
                                  ],
                                  "|",
                                  [
                                    { type: "'http'" },
                                    "&",
                                    "HTTPMixedInboundOptions",
                                  ],
                                ],
                                "|",
                                [
                                  { type: "'hysteria'" },
                                  "&",
                                  "HysteriaInboundOptions",
                                ],
                              ],
                              "|",
                              [
                                { type: "'hysteria2'" },
                                "&",
                                "Hysteria2InboundOptions",
                              ],
                            ],
                            "|",
                            [
                              { type: "'mixed'" },
                              "&",
                              "HTTPMixedInboundOptions",
                            ],
                          ],
                          "|",
                          [{ type: "'naive'" }, "&", "NaiveInboundOptions"],
                        ],
                        "|",
                        [{ type: "'redirect'" }, "&", "RedirectInboundOptions"],
                      ],
                      "|",
                      [
                        { type: "'shadowsocks'" },
                        "&",
                        "ShadowsocksInboundOptions",
                      ],
                    ],
                    "|",
                    [{ type: "'shadowtls'" }, "&", "ShadowTLSInboundOptions"],
                  ],
                  "|",
                  [{ type: "'socks'" }, "&", "SocksInboundOptions"],
                ],
                "|",
                [{ type: "'tproxy'" }, "&", "TProxyInboundOptions"],
              ],
              "|",
              [{ type: "'trojan'" }, "&", "TrojanInboundOptions"],
            ],
            "|",
            [{ type: "'tuic'" }, "&", "TUICInboundOptions"],
          ],
          "|",
          [{ type: "'tun'" }, "&", "TunInboundOptions"],
        ],
        "|",
        [{ type: "'vless'" }, "&", "VLESSInboundOptions"],
      ],
      "|",
      [{ type: "'vmess'" }, "&", "VMessInboundOptions"],
    ],
    "&",
    { "tag?": "string" },
  ],
  InboundACMEOptions: {
    "domain?": "string | string[]",
    "data_directory?": "string",
    "default_server_name?": "string",
    "email?": "string",
    "provider?": "string",
    "disable_http_challenge?": "boolean",
    "disable_tls_alpn_challenge?": "boolean",
    "alternative_http_port?": "integer",
    "alternative_tls_port?": "integer",
    "external_account?": "ACMEExternalAccountOptions",
    "dns01_challenge?": "ACMEDNS01ChallengeOptions",
  },
  InboundECHOptions: {
    "enabled?": "boolean",
    "pq_signature_schemes_enabled?": "boolean",
    "dynamic_record_sizing_disabled?": "boolean",
    "key?": "string | string[]",
    "key_path?": "string",
  },
  InboundMultiplexOptions: {
    "enabled?": "boolean",
    "padding?": "boolean",
    "brutal?": "BrutalOptions",
  },
  InboundRealityHandshakeOptions: {
    server: "string",
    server_port: "integer",
    "detour?": "string",
    "bind_interface?": "string",
    "inet4_bind_address?": "ListenAddress",
    "inet6_bind_address?": "ListenAddress",
    "protect_path?": "string",
    "routing_mark?": "integer",
    "reuse_addr?": "boolean",
    "connect_timeout?": "Duration",
    "tcp_fast_open?": "boolean",
    "tcp_multi_path?": "boolean",
    "udp_fragment?": "boolean",
    "domain_strategy?": "DomainStrategy",
    "fallback_delay?": "Duration",
  },
  InboundRealityOptions: {
    "enabled?": "boolean",
    "handshake?": "InboundRealityHandshakeOptions",
    "private_key?": "string",
    "short_id?": "string | string[]",
    "max_time_difference?": "Duration",
  },
  InboundTLSOptions: {
    "enabled?": "boolean",
    "server_name?": "string",
    "insecure?": "boolean",
    "alpn?": "string | string[]",
    "min_version?": "string",
    "max_version?": "string",
    "cipher_suites?": "string | string[]",
    "certificate?": "string | string[]",
    "certificate_path?": "string",
    "key?": "string | string[]",
    "key_path?": "string",
    "acme?": "InboundACMEOptions",
    "ech?": "InboundECHOptions",
    "reality?": "InboundRealityOptions",
  },
  ListenAddress: "string",
  LocalRuleSet: {
    "path?": "string",
  },
  LogOptions: {
    "disabled?": "boolean",
    "level?": "string",
    "output?": "string",
    "timestamp?": "boolean",
  },
  LogicalDNSRule: {
    mode: "string",
    "rules?": "DNSRule[]",
    "invert?": "boolean",
    "server?": "string",
    "disable_cache?": "boolean",
    "rewrite_ttl?": "integer",
    "client_subnet?": "AddrPrefix",
  },
  LogicalRule: {
    mode: "string",
    "rules?": "Rule[]",
    "invert?": "boolean",
    "outbound?": "string",
  },
  MemoryBytes: "integer",
  NTPOptions: {
    "enabled?": "boolean",
    "interval?": "Duration",
    "write_to_system?": "boolean",
    server: "string",
    server_port: "integer",
    "detour?": "string",
    "bind_interface?": "string",
    "inet4_bind_address?": "ListenAddress",
    "inet6_bind_address?": "ListenAddress",
    "protect_path?": "string",
    "routing_mark?": "integer",
    "reuse_addr?": "boolean",
    "connect_timeout?": "Duration",
    "tcp_fast_open?": "boolean",
    "tcp_multi_path?": "boolean",
    "udp_fragment?": "boolean",
    "domain_strategy?": "DomainStrategy",
    "fallback_delay?": "Duration",
  },
  NaiveInboundOptions: {
    "listen?": "ListenAddress",
    "listen_port?": "integer",
    "tcp_fast_open?": "boolean",
    "tcp_multi_path?": "boolean",
    "udp_fragment?": "boolean",
    "udp_timeout?": "UDPTimeoutCompat",
    "proxy_protocol?": "boolean",
    "proxy_protocol_accept_no_header?": "boolean",
    "detour?": "string",
    "sniff?": "boolean",
    "sniff_override_destination?": "boolean",
    "sniff_timeout?": "Duration",
    "domain_strategy?": "DomainStrategy",
    "udp_disable_domain_unmapping?": "boolean",
    "users?": "User[]",
    "network?": "NetworkList",
    "tls?": "InboundTLSOptions",
  },
  NetworkList: "'tcp' | 'udp'",
  Options: {
    "$schema?": "string",
    "log?": "LogOptions",
    "dns?": "DNSOptions",
    "ntp?": "NTPOptions",
    "inbounds?": "Inbound[]",
    "outbounds?": "Outbound[]",
    "route?": "RouteOptions",
    "experimental?": "ExperimentalOptions",
  },
  Outbound: [
    [
      [
        [
          [
            [
              [
                [
                  [
                    [
                      [
                        [
                          [
                            [
                              [
                                [
                                  [
                                    [
                                      [
                                        { "type?": "'block'" },
                                        "|",
                                        [
                                          { "type?": "'direct'" },
                                          "&",
                                          "DirectOutboundOptions",
                                        ],
                                      ],
                                      "|",
                                      { "type?": "'dns'" },
                                    ],
                                    "|",
                                    [
                                      { "type?": "'http'" },
                                      "&",
                                      "HTTPOutboundOptions",
                                    ],
                                  ],
                                  "|",
                                  [
                                    { "type?": "'hysteria'" },
                                    "&",
                                    "HysteriaOutboundOptions",
                                  ],
                                ],
                                "|",
                                [
                                  { "type?": "'hysteria2'" },
                                  "&",
                                  "Hysteria2OutboundOptions",
                                ],
                              ],
                              "|",
                              [
                                { "type?": "'selector'" },
                                "&",
                                "SelectorOutboundOptions",
                              ],
                            ],
                            "|",
                            [
                              { "type?": "'shadowsocks'" },
                              "&",
                              "ShadowsocksOutboundOptions",
                            ],
                          ],
                          "|",
                          [
                            { "type?": "'shadowsocksr'" },
                            "&",
                            "ShadowsocksROutboundOptions",
                          ],
                        ],
                        "|",
                        [
                          { "type?": "'shadowtls'" },
                          "&",
                          "ShadowTLSOutboundOptions",
                        ],
                      ],
                      "|",
                      [{ "type?": "'socks'" }, "&", "SocksOutboundOptions"],
                    ],
                    "|",
                    [{ "type?": "'ssh'" }, "&", "SSHOutboundOptions"],
                  ],
                  "|",
                  [{ "type?": "'tor'" }, "&", "TorOutboundOptions"],
                ],
                "|",
                [{ "type?": "'trojan'" }, "&", "TrojanOutboundOptions"],
              ],
              "|",
              [{ "type?": "'tuic'" }, "&", "TUICOutboundOptions"],
            ],
            "|",
            [{ "type?": "'urltest'" }, "&", "URLTestOutboundOptions"],
          ],
          "|",
          [{ "type?": "'vless'" }, "&", "VLESSOutboundOptions"],
        ],
        "|",
        [{ "type?": "'vmess'" }, "&", "VMessOutboundOptions"],
      ],
      "|",
      [{ "type?": "'wireguard'" }, "&", "WireGuardOutboundOptions"],
    ],
    "&",
    { "tag?": "string" },
  ],
  OutboundECHOptions: {
    "enabled?": "boolean",
    "pq_signature_schemes_enabled?": "boolean",
    "dynamic_record_sizing_disabled?": "boolean",
    "config?": "string | string[]",
    "config_path?": "string",
  },
  OutboundMultiplexOptions: {
    "enabled?": "boolean",
    "protocol?": "string",
    "max_connections?": "integer",
    "min_streams?": "integer",
    "max_streams?": "integer",
    "padding?": "boolean",
    "brutal?": "BrutalOptions",
  },
  OutboundRealityOptions: {
    "enabled?": "boolean",
    "public_key?": "string",
    "short_id?": "string",
  },
  OutboundTLSOptions: {
    "enabled?": "boolean",
    "disable_sni?": "boolean",
    "server_name?": "string",
    "insecure?": "boolean",
    "alpn?": "string | string[]",
    "min_version?": "string",
    "max_version?": "string",
    "cipher_suites?": "string | string[]",
    "certificate?": "string | string[]",
    "certificate_path?": "string",
    "ech?": "OutboundECHOptions",
    "utls?": "OutboundUTLSOptions",
    "reality?": "OutboundRealityOptions",
  },
  OutboundUTLSOptions: {
    "enabled?": "boolean",
    "fingerprint?": "string",
  },
  Prefix: "string",
  RedirectInboundOptions: {
    "listen?": "ListenAddress",
    "listen_port?": "integer",
    "tcp_fast_open?": "boolean",
    "tcp_multi_path?": "boolean",
    "udp_fragment?": "boolean",
    "udp_timeout?": "UDPTimeoutCompat",
    "proxy_protocol?": "boolean",
    "proxy_protocol_accept_no_header?": "boolean",
    "detour?": "string",
    "sniff?": "boolean",
    "sniff_override_destination?": "boolean",
    "sniff_timeout?": "Duration",
    "domain_strategy?": "DomainStrategy",
    "udp_disable_domain_unmapping?": "boolean",
  },
  RemoteRuleSet: {
    url: "string",
    "download_detour?": "string",
    "update_interval?": "Duration",
  },
  RouteOptions: {
    "geoip?": "GeoIPOptions",
    "geosite?": "GeositeOptions",
    "rules?": "Rule[]",
    "rule_set?": "RuleSet[]",
    "final?": "string",
    "find_process?": "boolean",
    "auto_detect_interface?": "boolean",
    "override_android_vpn?": "boolean",
    "default_interface?": "string",
    "default_mark?": "integer",
  },
  Rule: [
    [{ "type?": "'default'" }, "&", "DefaultRule"],
    "|",
    [{ "type?": "'logical'" }, "&", "LogicalRule"],
  ],
  RuleSet: [
    [
      [{ type: "'local'" }, "&", "LocalRuleSet"],
      "|",
      [{ type: "'remote'" }, "&", "RemoteRuleSet"],
    ],
    "&",
    { "tag?": "string", format: "string" },
  ],
  SSHOutboundOptions: {
    "detour?": "string",
    "bind_interface?": "string",
    "inet4_bind_address?": "ListenAddress",
    "inet6_bind_address?": "ListenAddress",
    "protect_path?": "string",
    "routing_mark?": "integer",
    "reuse_addr?": "boolean",
    "connect_timeout?": "Duration",
    "tcp_fast_open?": "boolean",
    "tcp_multi_path?": "boolean",
    "udp_fragment?": "boolean",
    "domain_strategy?": "DomainStrategy",
    "fallback_delay?": "Duration",
    server: "string",
    server_port: "integer",
    "user?": "string",
    "password?": "string",
    "private_key?": "string | string[]",
    "private_key_path?": "string",
    "private_key_passphrase?": "string",
    "host_key?": "string | string[]",
    "host_key_algorithms?": "string | string[]",
    "client_version?": "string",
  },
  SelectorOutboundOptions: {
    outbounds: "string[]",
    "default?": "string",
    "interrupt_exist_connections?": "boolean",
  },
  ServerOptions: {
    server: "string",
    server_port: "integer",
  },
  ShadowTLSHandshakeOptions: {
    server: "string",
    server_port: "integer",
    "detour?": "string",
    "bind_interface?": "string",
    "inet4_bind_address?": "ListenAddress",
    "inet6_bind_address?": "ListenAddress",
    "protect_path?": "string",
    "routing_mark?": "integer",
    "reuse_addr?": "boolean",
    "connect_timeout?": "Duration",
    "tcp_fast_open?": "boolean",
    "tcp_multi_path?": "boolean",
    "udp_fragment?": "boolean",
    "domain_strategy?": "DomainStrategy",
    "fallback_delay?": "Duration",
  },
  ShadowTLSInboundOptions: {
    "listen?": "ListenAddress",
    "listen_port?": "integer",
    "tcp_fast_open?": "boolean",
    "tcp_multi_path?": "boolean",
    "udp_fragment?": "boolean",
    "udp_timeout?": "UDPTimeoutCompat",
    "proxy_protocol?": "boolean",
    "proxy_protocol_accept_no_header?": "boolean",
    "detour?": "string",
    "sniff?": "boolean",
    "sniff_override_destination?": "boolean",
    "sniff_timeout?": "Duration",
    "domain_strategy?": "DomainStrategy",
    "udp_disable_domain_unmapping?": "boolean",
    "version?": "integer",
    "password?": "string",
    "users?": "ShadowTLSUser[]",
    "handshake?": "ShadowTLSHandshakeOptions",
    "handshake_for_server_name?": { ["string"]: "ShadowTLSHandshakeOptions" },
    "strict_mode?": "boolean",
  },
  ShadowTLSOutboundOptions: {
    "detour?": "string",
    "bind_interface?": "string",
    "inet4_bind_address?": "ListenAddress",
    "inet6_bind_address?": "ListenAddress",
    "protect_path?": "string",
    "routing_mark?": "integer",
    "reuse_addr?": "boolean",
    "connect_timeout?": "Duration",
    "tcp_fast_open?": "boolean",
    "tcp_multi_path?": "boolean",
    "udp_fragment?": "boolean",
    "domain_strategy?": "DomainStrategy",
    "fallback_delay?": "Duration",
    server: "string",
    server_port: "integer",
    "version?": "integer",
    "password?": "string",
    "tls?": "OutboundTLSOptions",
  },
  ShadowTLSUser: {
    "name?": "string",
    "password?": "string",
  },
  ShadowsocksDestination: {
    name: "string",
    password: "string",
    server: "string",
    server_port: "integer",
  },
  ShadowsocksInboundOptions: {
    "listen?": "ListenAddress",
    "listen_port?": "integer",
    "tcp_fast_open?": "boolean",
    "tcp_multi_path?": "boolean",
    "udp_fragment?": "boolean",
    "udp_timeout?": "UDPTimeoutCompat",
    "proxy_protocol?": "boolean",
    "proxy_protocol_accept_no_header?": "boolean",
    "detour?": "string",
    "sniff?": "boolean",
    "sniff_override_destination?": "boolean",
    "sniff_timeout?": "Duration",
    "domain_strategy?": "DomainStrategy",
    "udp_disable_domain_unmapping?": "boolean",
    "network?": "NetworkList",
    method: "string",
    "password?": "string",
    "users?": "ShadowsocksUser[]",
    "destinations?": "ShadowsocksDestination[]",
    "multiplex?": "InboundMultiplexOptions",
  },
  ShadowsocksOutboundOptions: {
    "detour?": "string",
    "bind_interface?": "string",
    "inet4_bind_address?": "ListenAddress",
    "inet6_bind_address?": "ListenAddress",
    "protect_path?": "string",
    "routing_mark?": "integer",
    "reuse_addr?": "boolean",
    "connect_timeout?": "Duration",
    "tcp_fast_open?": "boolean",
    "tcp_multi_path?": "boolean",
    "udp_fragment?": "boolean",
    "domain_strategy?": "DomainStrategy",
    "fallback_delay?": "Duration",
    server: "string",
    server_port: "integer",
    method: "string",
    password: "string",
    "plugin?": "string",
    "plugin_opts?": "string",
    "network?": "NetworkList",
    "udp_over_tcp?": "UDPOverTCPOptions",
    "multiplex?": "OutboundMultiplexOptions",
  },
  ShadowsocksROutboundOptions: {
    "detour?": "string",
    "bind_interface?": "string",
    "inet4_bind_address?": "ListenAddress",
    "inet6_bind_address?": "ListenAddress",
    "protect_path?": "string",
    "routing_mark?": "integer",
    "reuse_addr?": "boolean",
    "connect_timeout?": "Duration",
    "tcp_fast_open?": "boolean",
    "tcp_multi_path?": "boolean",
    "udp_fragment?": "boolean",
    "domain_strategy?": "DomainStrategy",
    "fallback_delay?": "Duration",
    server: "string",
    server_port: "integer",
    method: "string",
    password: "string",
    "obfs?": "string",
    "obfs_param?": "string",
    "protocol?": "string",
    "protocol_param?": "string",
    "network?": "NetworkList",
  },
  ShadowsocksUser: {
    name: "string",
    password: "string",
  },
  SocksInboundOptions: {
    "listen?": "ListenAddress",
    "listen_port?": "integer",
    "tcp_fast_open?": "boolean",
    "tcp_multi_path?": "boolean",
    "udp_fragment?": "boolean",
    "udp_timeout?": "UDPTimeoutCompat",
    "proxy_protocol?": "boolean",
    "proxy_protocol_accept_no_header?": "boolean",
    "detour?": "string",
    "sniff?": "boolean",
    "sniff_override_destination?": "boolean",
    "sniff_timeout?": "Duration",
    "domain_strategy?": "DomainStrategy",
    "udp_disable_domain_unmapping?": "boolean",
    "users?": "User[]",
  },
  SocksOutboundOptions: {
    "detour?": "string",
    "bind_interface?": "string",
    "inet4_bind_address?": "ListenAddress",
    "inet6_bind_address?": "ListenAddress",
    "protect_path?": "string",
    "routing_mark?": "integer",
    "reuse_addr?": "boolean",
    "connect_timeout?": "Duration",
    "tcp_fast_open?": "boolean",
    "tcp_multi_path?": "boolean",
    "udp_fragment?": "boolean",
    "domain_strategy?": "DomainStrategy",
    "fallback_delay?": "Duration",
    server: "string",
    server_port: "integer",
    "version?": "string",
    "username?": "string",
    "password?": "string",
    "network?": "NetworkList",
    "udp_over_tcp?": "UDPOverTCPOptions",
  },
  TProxyInboundOptions: {
    "listen?": "ListenAddress",
    "listen_port?": "integer",
    "tcp_fast_open?": "boolean",
    "tcp_multi_path?": "boolean",
    "udp_fragment?": "boolean",
    "udp_timeout?": "UDPTimeoutCompat",
    "proxy_protocol?": "boolean",
    "proxy_protocol_accept_no_header?": "boolean",
    "detour?": "string",
    "sniff?": "boolean",
    "sniff_override_destination?": "boolean",
    "sniff_timeout?": "Duration",
    "domain_strategy?": "DomainStrategy",
    "udp_disable_domain_unmapping?": "boolean",
    "network?": "NetworkList",
  },
  TUICInboundOptions: {
    "listen?": "ListenAddress",
    "listen_port?": "integer",
    "tcp_fast_open?": "boolean",
    "tcp_multi_path?": "boolean",
    "udp_fragment?": "boolean",
    "udp_timeout?": "UDPTimeoutCompat",
    "proxy_protocol?": "boolean",
    "proxy_protocol_accept_no_header?": "boolean",
    "detour?": "string",
    "sniff?": "boolean",
    "sniff_override_destination?": "boolean",
    "sniff_timeout?": "Duration",
    "domain_strategy?": "DomainStrategy",
    "udp_disable_domain_unmapping?": "boolean",
    "users?": "TUICUser[]",
    "congestion_control?": "string",
    "auth_timeout?": "Duration",
    "zero_rtt_handshake?": "boolean",
    "heartbeat?": "Duration",
    "tls?": "InboundTLSOptions",
  },
  TUICOutboundOptions: {
    "detour?": "string",
    "bind_interface?": "string",
    "inet4_bind_address?": "ListenAddress",
    "inet6_bind_address?": "ListenAddress",
    "protect_path?": "string",
    "routing_mark?": "integer",
    "reuse_addr?": "boolean",
    "connect_timeout?": "Duration",
    "tcp_fast_open?": "boolean",
    "tcp_multi_path?": "boolean",
    "udp_fragment?": "boolean",
    "domain_strategy?": "DomainStrategy",
    "fallback_delay?": "Duration",
    server: "string",
    server_port: "integer",
    "uuid?": "string",
    "password?": "string",
    "congestion_control?": "string",
    "udp_relay_mode?": "string",
    "udp_over_stream?": "boolean",
    "zero_rtt_handshake?": "boolean",
    "heartbeat?": "Duration",
    "network?": "NetworkList",
    "tls?": "OutboundTLSOptions",
  },
  TUICUser: {
    "name?": "string",
    "uuid?": "string",
    "password?": "string",
  },
  TorOutboundOptions: {
    "detour?": "string",
    "bind_interface?": "string",
    "inet4_bind_address?": "ListenAddress",
    "inet6_bind_address?": "ListenAddress",
    "protect_path?": "string",
    "routing_mark?": "integer",
    "reuse_addr?": "boolean",
    "connect_timeout?": "Duration",
    "tcp_fast_open?": "boolean",
    "tcp_multi_path?": "boolean",
    "udp_fragment?": "boolean",
    "domain_strategy?": "DomainStrategy",
    "fallback_delay?": "Duration",
    "executable_path?": "string",
    "extra_args?": "string[]",
    "data_directory?": "string",
    "torrc?": { ["string"]: "string" },
  },
  TrojanInboundOptions: {
    "listen?": "ListenAddress",
    "listen_port?": "integer",
    "tcp_fast_open?": "boolean",
    "tcp_multi_path?": "boolean",
    "udp_fragment?": "boolean",
    "udp_timeout?": "UDPTimeoutCompat",
    "proxy_protocol?": "boolean",
    "proxy_protocol_accept_no_header?": "boolean",
    "detour?": "string",
    "sniff?": "boolean",
    "sniff_override_destination?": "boolean",
    "sniff_timeout?": "Duration",
    "domain_strategy?": "DomainStrategy",
    "udp_disable_domain_unmapping?": "boolean",
    "users?": "TrojanUser[]",
    "tls?": "InboundTLSOptions",
    "fallback?": "ServerOptions",
    "fallback_for_alpn?": { ["string"]: "ServerOptions" },
    "multiplex?": "InboundMultiplexOptions",
    "transport?": "V2RayTransportOptions",
  },
  TrojanOutboundOptions: {
    "detour?": "string",
    "bind_interface?": "string",
    "inet4_bind_address?": "ListenAddress",
    "inet6_bind_address?": "ListenAddress",
    "protect_path?": "string",
    "routing_mark?": "integer",
    "reuse_addr?": "boolean",
    "connect_timeout?": "Duration",
    "tcp_fast_open?": "boolean",
    "tcp_multi_path?": "boolean",
    "udp_fragment?": "boolean",
    "domain_strategy?": "DomainStrategy",
    "fallback_delay?": "Duration",
    server: "string",
    server_port: "integer",
    password: "string",
    "network?": "NetworkList",
    "tls?": "OutboundTLSOptions",
    "multiplex?": "OutboundMultiplexOptions",
    "transport?": "V2RayTransportOptions",
  },
  TrojanUser: {
    name: "string",
    password: "string",
  },
  TunInboundOptions: {
    "interface_name?": "string",
    "mtu?": "integer",
    "gso?": "boolean",
    "inet4_address?": "string | string[]",
    "inet6_address?": "string | string[]",
    "auto_route?": "boolean",
    "strict_route?": "boolean",
    "inet4_route_address?": "string | string[]",
    "inet6_route_address?": "string | string[]",
    "inet4_route_exclude_address?": "string | string[]",
    "inet6_route_exclude_address?": "string | string[]",
    "include_interface?": "string | string[]",
    "exclude_interface?": "string | string[]",
    "include_uid?": "integer | integer[]",
    "include_uid_range?": "string | string[]",
    "exclude_uid?": "integer | integer[]",
    "exclude_uid_range?": "string | string[]",
    "include_android_user?": "integer | integer[]",
    "include_package?": "string | string[]",
    "exclude_package?": "string | string[]",
    "endpoint_independent_nat?": "boolean",
    "udp_timeout?": "UDPTimeoutCompat",
    "stack?": "string",
    "platform?": "TunPlatformOptions",
    "sniff?": "boolean",
    "sniff_override_destination?": "boolean",
    "sniff_timeout?": "Duration",
    "domain_strategy?": "DomainStrategy",
    "udp_disable_domain_unmapping?": "boolean",
  },
  TunPlatformOptions: {
    "http_proxy?": "HTTPProxyOptions",
  },
  UDPOverTCPOptions: {
    "enabled?": "boolean",
    "version?": "integer",
  },
  UDPTimeoutCompat: "string",
  URLTestOutboundOptions: {
    outbounds: "string[]",
    "url?": "string",
    "interval?": "Duration",
    "tolerance?": "integer",
    "idle_timeout?": "Duration",
    "interrupt_exist_connections?": "boolean",
  },
  User: { username: "string", password: "string" },
  V2RayAPIOptions: {
    "listen?": "string",
    "stats?": "V2RayStatsServiceOptions",
  },
  V2RayGRPCOptions: {
    "service_name?": "string",
    "idle_timeout?": "Duration",
    "ping_timeout?": "Duration",
    "permit_without_stream?": "boolean",
  },
  V2RayHTTPOptions: {
    "host?": "string | string[]",
    "path?": "string",
    "method?": "string",
    "headers?": { ["string"]: "string | string[]" },
    "idle_timeout?": "Duration",
    "ping_timeout?": "Duration",
  },
  V2RayHTTPUpgradeOptions: {
    "host?": "string",
    "path?": "string",
    "headers?": { ["string"]: "string | string[]" },
  },
  V2RayQUICOptions: {},
  V2RayStatsServiceOptions: {
    "enabled?": "boolean",
    "inbounds?": "string[]",
    "outbounds?": "string[]",
    "users?": "string[]",
  },
  V2RayTransportOptions: [
    [
      [
        [
          [{ type: "'grpc'" }, "&", "V2RayGRPCOptions"],
          "|",
          [{ type: "'http'" }, "&", "V2RayHTTPOptions"],
        ],
        "|",
        [{ type: "'httpupgrade'" }, "&", "V2RayHTTPUpgradeOptions"],
      ],
      "|",
      [{ type: "'quic'" }, "&", "V2RayQUICOptions"],
    ],
    "|",
    [{ type: "'ws'" }, "&", "V2RayWebsocketOptions"],
  ],
  V2RayWebsocketOptions: {
    "path?": "string",
    "headers?": { ["string"]: "string | string[]" },
    "max_early_data?": "integer",
    "early_data_header_name?": "string",
  },
  VLESSInboundOptions: {
    "listen?": "ListenAddress",
    "listen_port?": "integer",
    "tcp_fast_open?": "boolean",
    "tcp_multi_path?": "boolean",
    "udp_fragment?": "boolean",
    "udp_timeout?": "UDPTimeoutCompat",
    "proxy_protocol?": "boolean",
    "proxy_protocol_accept_no_header?": "boolean",
    "detour?": "string",
    "sniff?": "boolean",
    "sniff_override_destination?": "boolean",
    "sniff_timeout?": "Duration",
    "domain_strategy?": "DomainStrategy",
    "udp_disable_domain_unmapping?": "boolean",
    "users?": "VLESSUser[]",
    "tls?": "InboundTLSOptions",
    "multiplex?": "InboundMultiplexOptions",
    "transport?": "V2RayTransportOptions",
  },
  VLESSOutboundOptions: {
    "detour?": "string",
    "bind_interface?": "string",
    "inet4_bind_address?": "ListenAddress",
    "inet6_bind_address?": "ListenAddress",
    "protect_path?": "string",
    "routing_mark?": "integer",
    "reuse_addr?": "boolean",
    "connect_timeout?": "Duration",
    "tcp_fast_open?": "boolean",
    "tcp_multi_path?": "boolean",
    "udp_fragment?": "boolean",
    "domain_strategy?": "DomainStrategy",
    "fallback_delay?": "Duration",
    server: "string",
    server_port: "integer",
    uuid: "string",
    "flow?": "string",
    "network?": "NetworkList",
    "tls?": "OutboundTLSOptions",
    "multiplex?": "OutboundMultiplexOptions",
    "transport?": "V2RayTransportOptions",
    "packet_encoding?": "string",
  },
  VLESSUser: {
    name: "string",
    uuid: "string",
    "flow?": "string",
  },
  VMessInboundOptions: {
    "listen?": "ListenAddress",
    "listen_port?": "integer",
    "tcp_fast_open?": "boolean",
    "tcp_multi_path?": "boolean",
    "udp_fragment?": "boolean",
    "udp_timeout?": "UDPTimeoutCompat",
    "proxy_protocol?": "boolean",
    "proxy_protocol_accept_no_header?": "boolean",
    "detour?": "string",
    "sniff?": "boolean",
    "sniff_override_destination?": "boolean",
    "sniff_timeout?": "Duration",
    "domain_strategy?": "DomainStrategy",
    "udp_disable_domain_unmapping?": "boolean",
    "users?": "VMessUser[]",
    "tls?": "InboundTLSOptions",
    "multiplex?": "InboundMultiplexOptions",
    "transport?": "V2RayTransportOptions",
  },
  VMessOutboundOptions: {
    "detour?": "string",
    "bind_interface?": "string",
    "inet4_bind_address?": "ListenAddress",
    "inet6_bind_address?": "ListenAddress",
    "protect_path?": "string",
    "routing_mark?": "integer",
    "reuse_addr?": "boolean",
    "connect_timeout?": "Duration",
    "tcp_fast_open?": "boolean",
    "tcp_multi_path?": "boolean",
    "udp_fragment?": "boolean",
    "domain_strategy?": "DomainStrategy",
    "fallback_delay?": "Duration",
    server: "string",
    server_port: "integer",
    uuid: "string",
    security: "string",
    "alter_id?": "integer",
    "global_padding?": "boolean",
    "authenticated_length?": "boolean",
    "network?": "NetworkList",
    "tls?": "OutboundTLSOptions",
    "packet_encoding?": "string",
    "multiplex?": "OutboundMultiplexOptions",
    "transport?": "V2RayTransportOptions",
  },
  VMessUser: {
    name: "string",
    uuid: "string",
    "alterId?": "integer",
  },
  WireGuardOutboundOptions: {
    "detour?": "string",
    "bind_interface?": "string",
    "inet4_bind_address?": "ListenAddress",
    "inet6_bind_address?": "ListenAddress",
    "protect_path?": "string",
    "routing_mark?": "integer",
    "reuse_addr?": "boolean",
    "connect_timeout?": "Duration",
    "tcp_fast_open?": "boolean",
    "tcp_multi_path?": "boolean",
    "udp_fragment?": "boolean",
    "domain_strategy?": "DomainStrategy",
    "fallback_delay?": "Duration",
    "system_interface?": "boolean",
    "gso?": "boolean",
    "interface_name?": "string",
    local_address: "string | string[]",
    private_key: "string",
    "peers?": "WireGuardPeer[]",
    server: "string",
    server_port: "integer",
    peer_public_key: "string",
    "pre_shared_key?": "string",
    "reserved?": "integer[]",
    "workers?": "integer",
    "mtu?": "integer",
    "network?": "NetworkList",
  },
  WireGuardPeer: {
    server: "string",
    server_port: "integer",
    "public_key?": "string",
    "pre_shared_key?": "string",
    "allowed_ips?": "string | string[]",
    "reserved?": "integer[]",
  },
});
export const types = $.export();
export type ACMEDNS01AliDNSOptions = typeof types.ACMEDNS01AliDNSOptions.infer;
export type ACMEDNS01ChallengeOptions =
  typeof types.ACMEDNS01ChallengeOptions.infer;
export type ACMEDNS01CloudflareOptions =
  typeof types.ACMEDNS01CloudflareOptions.infer;
export type ACMEExternalAccountOptions =
  typeof types.ACMEExternalAccountOptions.infer;
export type AddrPrefix = typeof types.AddrPrefix.infer;
export type BrutalOptions = typeof types.BrutalOptions.infer;
export type CacheFileOptions = typeof types.CacheFileOptions.infer;
export type ClashAPIOptions = typeof types.ClashAPIOptions.infer;
export type DNSFakeIPOptions = typeof types.DNSFakeIPOptions.infer;
export type DNSOptions = typeof types.DNSOptions.infer;
export type DNSQueryType = typeof types.DNSQueryType.infer;
export type DNSRule = typeof types.DNSRule.infer;
export type DNSServerOptions = typeof types.DNSServerOptions.infer;
export type DebugOptions = typeof types.DebugOptions.infer;
export type DefaultDNSRule = typeof types.DefaultDNSRule.infer;
export type DefaultRule = typeof types.DefaultRule.infer;
export type DirectInboundOptions = typeof types.DirectInboundOptions.infer;
export type DirectOutboundOptions = typeof types.DirectOutboundOptions.infer;
export type DomainStrategy = typeof types.DomainStrategy.infer;
export type Duration = typeof types.Duration.infer;
export type ExperimentalOptions = typeof types.ExperimentalOptions.infer;
export type GeoIPOptions = typeof types.GeoIPOptions.infer;
export type GeositeOptions = typeof types.GeositeOptions.infer;
export type HTTPMixedInboundOptions =
  typeof types.HTTPMixedInboundOptions.infer;
export type HTTPOutboundOptions = typeof types.HTTPOutboundOptions.infer;
export type HTTPProxyOptions = typeof types.HTTPProxyOptions.infer;
export type Hysteria2InboundOptions =
  typeof types.Hysteria2InboundOptions.infer;
export type Hysteria2Obfs = typeof types.Hysteria2Obfs.infer;
export type Hysteria2OutboundOptions =
  typeof types.Hysteria2OutboundOptions.infer;
export type Hysteria2User = typeof types.Hysteria2User.infer;
export type HysteriaInboundOptions = typeof types.HysteriaInboundOptions.infer;
export type HysteriaOutboundOptions =
  typeof types.HysteriaOutboundOptions.infer;
export type HysteriaUser = typeof types.HysteriaUser.infer;
export type Inbound = typeof types.Inbound.infer;
export type InboundACMEOptions = typeof types.InboundACMEOptions.infer;
export type InboundECHOptions = typeof types.InboundECHOptions.infer;
export type InboundMultiplexOptions =
  typeof types.InboundMultiplexOptions.infer;
export type InboundRealityHandshakeOptions =
  typeof types.InboundRealityHandshakeOptions.infer;
export type InboundRealityOptions = typeof types.InboundRealityOptions.infer;
export type InboundTLSOptions = typeof types.InboundTLSOptions.infer;
export type ListenAddress = typeof types.ListenAddress.infer;
export type LocalRuleSet = typeof types.LocalRuleSet.infer;
export type LogOptions = typeof types.LogOptions.infer;
export type LogicalDNSRule = typeof types.LogicalDNSRule.infer;
export type LogicalRule = typeof types.LogicalRule.infer;
export type MemoryBytes = typeof types.MemoryBytes.infer;
export type NTPOptions = typeof types.NTPOptions.infer;
export type NaiveInboundOptions = typeof types.NaiveInboundOptions.infer;
export type NetworkList = typeof types.NetworkList.infer;
export type Options = typeof types.Options.infer;
export type Outbound = typeof types.Outbound.infer;
export type OutboundECHOptions = typeof types.OutboundECHOptions.infer;
export type OutboundMultiplexOptions =
  typeof types.OutboundMultiplexOptions.infer;
export type OutboundRealityOptions = typeof types.OutboundRealityOptions.infer;
export type OutboundTLSOptions = typeof types.OutboundTLSOptions.infer;
export type OutboundUTLSOptions = typeof types.OutboundUTLSOptions.infer;
export type Prefix = typeof types.Prefix.infer;
export type RedirectInboundOptions = typeof types.RedirectInboundOptions.infer;
export type RemoteRuleSet = typeof types.RemoteRuleSet.infer;
export type RouteOptions = typeof types.RouteOptions.infer;
export type Rule = typeof types.Rule.infer;
export type RuleSet = typeof types.RuleSet.infer;
export type SSHOutboundOptions = typeof types.SSHOutboundOptions.infer;
export type SelectorOutboundOptions =
  typeof types.SelectorOutboundOptions.infer;
export type ServerOptions = typeof types.ServerOptions.infer;
export type ShadowTLSHandshakeOptions =
  typeof types.ShadowTLSHandshakeOptions.infer;
export type ShadowTLSInboundOptions =
  typeof types.ShadowTLSInboundOptions.infer;
export type ShadowTLSOutboundOptions =
  typeof types.ShadowTLSOutboundOptions.infer;
export type ShadowTLSUser = typeof types.ShadowTLSUser.infer;
export type ShadowsocksDestination = typeof types.ShadowsocksDestination.infer;
export type ShadowsocksInboundOptions =
  typeof types.ShadowsocksInboundOptions.infer;
export type ShadowsocksOutboundOptions =
  typeof types.ShadowsocksOutboundOptions.infer;
export type ShadowsocksROutboundOptions =
  typeof types.ShadowsocksROutboundOptions.infer;
export type ShadowsocksUser = typeof types.ShadowsocksUser.infer;
export type SocksInboundOptions = typeof types.SocksInboundOptions.infer;
export type SocksOutboundOptions = typeof types.SocksOutboundOptions.infer;
export type TProxyInboundOptions = typeof types.TProxyInboundOptions.infer;
export type TUICInboundOptions = typeof types.TUICInboundOptions.infer;
export type TUICOutboundOptions = typeof types.TUICOutboundOptions.infer;
export type TUICUser = typeof types.TUICUser.infer;
export type TorOutboundOptions = typeof types.TorOutboundOptions.infer;
export type TrojanInboundOptions = typeof types.TrojanInboundOptions.infer;
export type TrojanOutboundOptions = typeof types.TrojanOutboundOptions.infer;
export type TrojanUser = typeof types.TrojanUser.infer;
export type TunInboundOptions = typeof types.TunInboundOptions.infer;
export type TunPlatformOptions = typeof types.TunPlatformOptions.infer;
export type UDPOverTCPOptions = typeof types.UDPOverTCPOptions.infer;
export type UDPTimeoutCompat = typeof types.UDPTimeoutCompat.infer;
export type URLTestOutboundOptions = typeof types.URLTestOutboundOptions.infer;
export type User = typeof types.User.infer;
export type V2RayAPIOptions = typeof types.V2RayAPIOptions.infer;
export type V2RayGRPCOptions = typeof types.V2RayGRPCOptions.infer;
export type V2RayHTTPOptions = typeof types.V2RayHTTPOptions.infer;
export type V2RayHTTPUpgradeOptions =
  typeof types.V2RayHTTPUpgradeOptions.infer;
export type V2RayQUICOptions = typeof types.V2RayQUICOptions.infer;
export type V2RayStatsServiceOptions =
  typeof types.V2RayStatsServiceOptions.infer;
export type V2RayTransportOptions = typeof types.V2RayTransportOptions.infer;
export type V2RayWebsocketOptions = typeof types.V2RayWebsocketOptions.infer;
export type VLESSInboundOptions = typeof types.VLESSInboundOptions.infer;
export type VLESSOutboundOptions = typeof types.VLESSOutboundOptions.infer;
export type VLESSUser = typeof types.VLESSUser.infer;
export type VMessInboundOptions = typeof types.VMessInboundOptions.infer;
export type VMessOutboundOptions = typeof types.VMessOutboundOptions.infer;
export type VMessUser = typeof types.VMessUser.infer;
export type WireGuardOutboundOptions =
  typeof types.WireGuardOutboundOptions.infer;
export type WireGuardPeer = typeof types.WireGuardPeer.infer;
